////  Formen////  Created by sigiwara on 2008-03-24.//  Copyright (c) 2008 __MyCompanyName__. All rights reserved.//package tools {	import flash.display.Sprite;	import Trigonometrie;		class Formen extends Sprite {			// Testfunktion Trace:Hello		public static function hello() {			trace("Formen");		}		// Zeichne Rechteck		public static function zeichneRechteck(sprite:Sprite, x:Number, y:Number, breite:Number, hoehe:Number){			sprite.graphics.moveTo(x, y);			sprite.graphics.lineTo(x+breite, y);			sprite.graphics.lineTo(x+breite, y+hoehe);			sprite.graphics.lineTo(x, y+hoehe);			sprite.graphics.lineTo(x, y);		}		// Zeichne Rechteck mit rounded corners		public static function zeichneRundesRechteck(sprite:Sprite, x:Number, y:Number, breite:Number, hoehe:Number, radius:Number){			var tempX:Number;			var radWinkel:Number;			var i:Number;			sprite.graphics.moveTo(x, y-radius);			sprite.graphics.lineTo(x+breite, y-radius);			//zeichneKreissegmentLinie(sprite, x+breite, y+radius, radius, 90, -90);			for ( i=0; i <= 90; i++){				radWinkel = Trigonometrie.degToRad(-90 + 1 * i);				sprite.graphics.lineTo(Trigonometrie.xPos(radWinkel, radius)+x+breite,Trigonometrie.yPos(radWinkel, radius)+y);			}			sprite.graphics.lineTo(x+breite+radius, y+hoehe);			for ( i=0; i <= 90; i++){				radWinkel = Trigonometrie.degToRad( 0 + 1 * i);				sprite.graphics.lineTo(Trigonometrie.xPos(radWinkel, radius)+x+breite,Trigonometrie.yPos(radWinkel, radius)+y+hoehe);			}			sprite.graphics.lineTo(x, y+hoehe+radius);			for ( i=0; i <= 90; i++){				radWinkel = Trigonometrie.degToRad(90 + 1 * i);				sprite.graphics.lineTo(Trigonometrie.xPos(radWinkel, radius)+x,Trigonometrie.yPos(radWinkel, radius)+y+hoehe);			}			sprite.graphics.lineTo(x-radius, y);			for ( i=0; i <= 90; i++){				radWinkel = Trigonometrie.degToRad(180 + 1 * i);				sprite.graphics.lineTo(Trigonometrie.xPos(radWinkel, radius)+x,Trigonometrie.yPos(radWinkel, radius)+y);			}		}		// Zeichne Rechteck mit eingeknickten ecken		public static function zeichneEingeknicktesRechteck(sprite:Sprite, x:Number, y:Number, breite:Number, hoehe:Number, radius:Number){			var tempX:Number;			sprite.graphics.moveTo(x+radius, y);			sprite.graphics.lineTo(x+breite-radius, y);			sprite.graphics.lineTo(x+breite-radius, y+radius)			sprite.graphics.lineTo(x+breite, y+radius)			//sprite.moveTo(x+breite-radius, y-radius);			//zeichneKreissegmentLinie(sprite, x, y, radius, 90, -90);			sprite.graphics.lineTo(x+breite, y+hoehe-radius);			sprite.graphics.lineTo(x+breite-radius, y+hoehe-radius);			sprite.graphics.lineTo(x+breite-radius, y+hoehe);			//zeichneKreissegmentLinie(sprite, x+breite, y+breite, radius, 90, 0);			sprite.graphics.lineTo(x+radius, y+hoehe);			sprite.graphics.lineTo(x+radius, y+hoehe-radius);			sprite.graphics.lineTo(x, y+hoehe-radius);						//zeichneKreissegmentLinie(sprite, x, y+breite, radius, 90, 90);			sprite.graphics.lineTo(x, y+radius);			sprite.graphics.lineTo(x+radius, y+radius);			sprite.graphics.lineTo(x+radius, y);			//zeichneKreissegmentLinie(sprite, x, y, radius, 90, 180);		}		// Zeichne Kreis		public static function zeichneKreis(sprite:Sprite, x:Number, y:Number, r:Number) {			    sprite.graphics.moveTo(x+r, y);			    sprite.graphics.curveTo(r+x, Math.tan(Math.PI/8)*r+y, Math.sin(Math.PI/4)*r+x, 			Math.sin(Math.PI/4)*r+y);			    sprite.graphics.curveTo(Math.tan(Math.PI/8)*r+x, r+y, x, r+y);			    sprite.graphics.curveTo(-Math.tan(Math.PI/8)*r+x, r+y, -Math.sin(Math.PI/4)*r+x, 			Math.sin(Math.PI/4)*r+y);			    sprite.graphics.curveTo(-r+x, Math.tan(Math.PI/8)*r+y, -r+x, y);			    sprite.graphics.curveTo(-r+x, -Math.tan(Math.PI/8)*r+y, -Math.sin(Math.PI/4)*r+x, 			-Math.sin(Math.PI/4)*r+y);			    sprite.graphics.curveTo(-Math.tan(Math.PI/8)*r+x, -r+y, x, -r+y);			    sprite.graphics.curveTo(Math.tan(Math.PI/8)*r+x, -r+y, Math.sin(Math.PI/4)*r+x, 			-Math.sin(Math.PI/4)*r+y);			    sprite.graphics.curveTo(r+x, -Math.tan(Math.PI/8)*r+y, r+x, y);		}		public static function zeichneKreissegmentLinie(sprite:Sprite, x:Number, y:Number, innerRadius:Number, winkel:Number, offset:Number) {			// Settings			var aufloesung:Number = 1;			var schritte:Number = Math.ceil(winkel/aufloesung);			var schrittWinkel:Number = winkel/schritte;			var radWinkel:Number;			var i:Number;			// Von 0 bis Winkel			for ( i=0; i <= schritte; i++){				radWinkel = Trigonometrie.degToRad(offset + schrittWinkel * i);				sprite.graphics.lineTo(Trigonometrie.xPos(radWinkel, innerRadius),Trigonometrie.yPos(radWinkel, innerRadius));			}		}		// Zeichne Kreissegment		// (sich selbst, x-Pos MP, y-Pos MP, Radius, Dicke, Sektorwinkel, Offset von 0Grad)		public static function zeichneKreissegment(sprite:Sprite, x:Number, y:Number, innerRadius:Number, thickness:Number, winkel:Number, offset:Number) {			// Settings			var aufloesung:Number = 1;			var schritte:Number = Math.ceil(winkel/aufloesung);			var schrittWinkel:Number = winkel/schritte;			var radWinkel:Number			var i:Number;			// Auf die Kreislinie bewegen			radWinkel = Trigonometrie.degToRad(offset);			sprite.graphics.moveTo(Trigonometrie.xPos(radWinkel, innerRadius),Trigonometrie.yPos(radWinkel, innerRadius));						// Von 0 bis Winkel			for ( i=0; i <= schritte; i++){				radWinkel = Trigonometrie.degToRad(offset + schrittWinkel * i);				sprite.graphics.lineTo(Trigonometrie.xPos(radWinkel, innerRadius),Trigonometrie.yPos(radWinkel, innerRadius));			}			// Von Winkel bis 0 mit zusätzlicher Dicke			for ( i=schritte; i >=0; i--){				radWinkel = Trigonometrie.degToRad(offset + schrittWinkel * i);				sprite.graphics.lineTo(Trigonometrie.xPos(radWinkel, (innerRadius + thickness)),Trigonometrie.yPos(radWinkel, (innerRadius + thickness)))			}		}		// Zeichne Kreissegment		// (sich selbst, x-Pos MP, y-Pos MP, Radius, Dicke, Sektorwinkel, Offset von 0Grad)		public static function zeichneKreisstrahlen(sprite:Sprite, x:Number, y:Number, innerRadius:Number, thickness:Number, winkel:Number, offset:Number) {			// Settings			var aufloesung:Number = 1;			var schritte:Number = Math.ceil(winkel/aufloesung);			var schrittWinkel:Number = winkel/schritte;			var radWinkel:Number;			var i:Number;			// Auf die Kreislinie bewegen			radWinkel = Trigonometrie.degToRad(offset);			sprite.graphics.moveTo(Trigonometrie.xPos(radWinkel, innerRadius),Trigonometrie.yPos(radWinkel, innerRadius));						// Von 0 bis Winkel			for ( i=0; i <= schritte; i++){				radWinkel = Trigonometrie.degToRad(offset + schrittWinkel * i);				sprite.graphics.lineTo(Trigonometrie.xPos(radWinkel, innerRadius),Trigonometrie.yPos(radWinkel, innerRadius));			}			// Von Winkel bis 0 mit zusätzlicher Dicke			for ( i=(schritte); i >=0; i--){				radWinkel = Trigonometrie.degToRad(offset + schrittWinkel * (i));				sprite.graphics.lineTo(Trigonometrie.xPos(radWinkel, (innerRadius + thickness)),Trigonometrie.yPos(radWinkel, (innerRadius + thickness)))			}		}			}}