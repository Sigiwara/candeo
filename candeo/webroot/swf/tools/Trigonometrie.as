////  Trigonometrie////  Created by sigiwara on 2008-03-24.//  Copyright (c) 2008 __MyCompanyName__. All rights reserved.//package tools {	import flash.display.Sprite;	import flash.display.MovieClip;    	class Trigonometrie extends Sprite {				// Testfunktion Trace:Hello		public static function hello() {			trace("Trigonometrie");		}			// X-Position auf Kreis mit Objekt		public static function xposition(inSprite:Sprite, inWinkel:Number, inRadius:Number, inMTPK:Number) {			inSprite.x = Math.cos(inWinkel)*inRadius+inMTPK;		}			// Y-Position auf Kreis mit Objekt		public static function yposition(inSprite:Sprite, inWinkel:Number, inRadius:Number, inMTPK:Number) {			inSprite.y = Math.sin(inWinkel)*inRadius+inMTPK;		}			// X-Position auf Kreis		public static function xPos(inWinkel:Number, inRadius:Number) {			var xPos = Math.cos(inWinkel)*inRadius;			return xPos;		}			// Y-Position auf Kreis		public static function yPos(inWinkel:Number, inRadius:Number) {			var yPos = Math.sin(inWinkel)*inRadius;			return yPos;		}			// Verteilung auf Kreis		public static function verteilungAufKreis(inAnzahl:Number){			var tWinkel = 360/inAnzahl;			return tWinkel;		}				// Berechnung des Bogenmasses		public static function degToRad(inWinkel:Number) {			var tWinkel = Math.PI*inWinkel/180;			return tWinkel;		}		// Berechnung des Gradmasses		public static function radToDeg(inWinkel:Number) {			var tWinkel = 180*inWinkel/Math.PI;			return tWinkel;		}		////////////////////////////////////////		//	geändert 07-04-24		////////////////////////////////////////		// Berechnung des Winkels zwischen zwei MovieClips zur X-Achse		public static function winkelBerechnung(inDeltaX:Number, inDeltaY:Number) {			var tWinkel = Math.atan2(inDeltaY, inDeltaX);			//var tWinkel = Math.atan2(inDeltaY, inDeltaX);			return tWinkel;		}				// Berechnung des Winkels zwischen MC und Maus zur X-Achse		public static function winkelBerechnungMaus(inDeltaX:Number, inDeltaY:Number) {		var tWinkel = 360+(Number(Math.atan2(inDeltaY, inDeltaX)*180/Math.PI));		return tWinkel;		}				// Berechung der Distanz zwischen zwei MCs		public static function distanzBerechnung(inSprite:Sprite, inSpriteMitte:Sprite) {		var deltaX = AbstandX(inSprite, inSpriteMitte);		var deltaY = AbstandY(inSprite, inSpriteMitte);		var tRadius = Math.sqrt((Math.pow(deltaX, 2))+(Math.pow(deltaY, 2)));		return tRadius;		}			// Berechnung des X Abstandes zwischen 2 Movieclips		public static function AbstandX(inSpriteA:Sprite, inSpriteB:Sprite) {		var tdeltaX = inSpriteA.x-inSpriteB.x;		return tdeltaX;		}			// Berechnung des Y Abstandes zwischen 2 Movieclips		public static function AbstandY(inSpriteA:Sprite, inSpriteB:Sprite) {		var tdeltaY = inSpriteA.y-inSpriteB.y;		return tdeltaY;		}				// Berechung der Distanz zwischen Maus und MC		public static function distanzBerechnungZuMaus(inSprite:Sprite) {		var tdeltaX = inSprite.x - inSprite.mouseX;		var tdeltaY = inSprite.y - inSprite.mouseY;		var tRadius = Math.sqrt((Math.pow(tdeltaX, 2))+(Math.pow(tdeltaY, 2)));		return tRadius;		}			// Berechnung des X Abstandes zwischen Maus und Movieclips		public static function abstandXZuMaus(inSprite:Sprite) {		var tDeltaX = inSprite.x - inSprite.stage.mouseX;		return tDeltaX;		}			// Berechnung des Y Abstandes zwischen Maus und Movieclips		public static function abstandYZuMaus(inSprite:Sprite) {		var tDeltaY = inSprite.y - inSprite.stage.mouseY;		return tDeltaY;		}			// Berechnung der neuen Position des Movieclips		public static function neueKoordinaten(inSpriteMitte:Sprite, inSprite:Sprite, inSpeed:Number, inRadius:Number) {		var deltaX = AbstandX(inSprite, inSpriteMitte);		var deltaY = AbstandY(inSprite, inSpriteMitte);		// tRadius = distanzBerechnung(deltaX, deltaY);		// tRadius = 50;		var tWinkel = winkelBerechnung(deltaX, deltaY);		inSprite.rotation = tWinkel;		tWinkel += inSpeed;		if (tWinkel>360) {			tWinkel -= 360;		}		var tBogenMass = degToRad(tWinkel);		inSprite.x = inSpriteMitte.x+(Math.cos(tBogenMass)*inRadius);		inSprite.y = inSpriteMitte.y+(Math.sin(tBogenMass)*inRadius);		}	}}